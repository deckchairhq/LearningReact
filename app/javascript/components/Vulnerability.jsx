import React from "react";
import {Link} from "react-router-dom";

class Vulnerability extends React.Component {
    constructor(props) {
        super(props);
        this.state = {vulnerability: {packages: ""}}; //TODO: Find out why we don't initialize with an array

        this.addHtmlEntities = this.addHtmlEntities.bind(this);
        this.deleteVulnerability = this.deleteVulnerability.bind(this);
    }

    componentDidMount() {
        const {
            match: {
                params: {id}
            }
        } = this.props;

        const url = `/api/v1/show/${id}`;

        fetch(url)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error("Network response was not ok.");
            })
            .then(response => this.setState({
                vulnerability: response
            }))
            .catch(() => this.props.history.push("/vulnerabilities"));
    }


    addHtmlEntities(str) {
        return String(str)
            .replace(/&lt;/g, "<")
            .replace(/&gt;/g, ">");
    }

    deleteVulnerability() {
        const {
            match: {
                params: { id }
            }
        } = this.props;
        const url = `/api/v1/vulnerabilities/destroy/${id}`;
        const token = document.querySelector('meta[name="csrf-token"]').content;

        fetch(url, {
            method: "DELETE",
            headers: {
                "X-CSRF-Token": token,
                "Content-Type": "application/json"
            }
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error("Network response was not ok.");
            })
            .then(() => this.props.history.push("/vulnerabilities"))
            .catch(error => console.log(error.message));
    }

    render() {
        const {vulnerability} = this.state;
        let packagesList = "No software available";

        if (vulnerability.packages.length > 0) {
            packagesList = vulnerability.packages
                .split(",")
                .map((pkg, index) => (
                    <li key={index} className="list-group-item">{pkg}</li>
                ));
        }
        const vulnerabilityNotes = this.addHtmlEntities(vulnerability.notes);

        return (
            <div className="">
                <div className="hero position-relative d-flex align-items-center justify-content-center">

                    {/*<img src={recipe.image}*/}
                    {/*     alt={`${recipe.name} image`}*/}
                    {/*     className="img-fluid position-absolute"/>*/}

                    <div className="overlay bg-dark position-absolute"/>
                    <h1 className="display-4 position-relative text-white">
                        {vulnerability.name}
                    </h1>
                </div>

                <div className="container py-5">
                    <div className="row">

                        <div className="col-sm-12 col-lg-3">
                            <ul className="list-group">
                                <h5 className="mb-2">Packages</h5>
                                {packagesList}
                            </ul>
                        </div>

                        <div className="col-sm-12 col-lg-7">
                            <h5 className="mb-2">Vuln Notes</h5>
                            <div dangerouslySetInnerHTML={{
                                __html: `${vulnerabilityNotes}`
                            }}/>
                        </div>

                        <div className="col-sm-12 col-lg-2">
                            <button type="button" className="btn btn-danger" onClick={this.deleteVulnerability}>
                                Delete Vulnerability
                            </button>
                        </div>
                    </div>

                    <Link to="/vulnerabilities" className="btn btn-link">
                        Back to vulnerabilities
                    </Link>
                </div>
            </div>
        );
    }
}

export default Vulnerability;
