import React from "react";
import {Link} from "react-router-dom";

class NewVulnerability extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            name: "",
            notes: "",
            score: 0,
            packages: "",
            timestamp: 0
        };

        this.onChange = this.onChange.bind(this);
        this.onSubmit = this.onSubmit.bind(this);
        this.stripHtmlEntities = this.stripHtmlEntities.bind(this);
    }

    //TODO: This is silly...
    stripHtmlEntities(str) {
        return String(str)
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");
    }

    onChange(event) {
        //todo: Remove me
        console.info("iSPY OCEV:", event.target.name, event.target.value, event);
        this.setState({[event.target.name]: event.target.value});
    }

    onSubmit(event) {
        event.preventDefault();
        const url = "/api/v1/vulnerabilities/create";
        const {name, notes, score, packages} = this.state;

        if (name.length == 0 || score.length == 0 || packages.length == 0 || notes.length == 0)
            return;

        const body = {
            name,
            notes: notes.replace(/\n/g, "<br><br>"), //TODO: This should be moved to a dedicated serialize/parse utility method
            score,
            packages,
            timestamp: Math.round(Date.now() / 1000)
        };

        // TODO: Look into how Rails & React co-operate with CSRF (could be an auto way)
        const token = document.querySelector('meta[name="csrf-token"]').content;

        fetch(url, {
            method: "POST",
            headers: {
                "X-CSRF-Token": token,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error("Network response was not ok.");
            })
            .then(response => this.props.history.push(`/vulnerability/${response.id}`))
            .catch(error => console.error(error.message));
    }


    render() {
        return (
            <div className="container mt-5">
                <div className="row">
                    <div className="col-sm-12 col-lg-6 offset-lg-3">
                        <h1 className="font-weight-normal mb-5">
                            Add a new vuln to our awesome vuln collection.
                        </h1>
                        <form onSubmit={this.onSubmit}>
                            <div className="form-group">
                                <label htmlFor="vulnerabilityName">Name</label>
                                <input type="text"
                                       name="name"
                                       id="vulnerabilityName"
                                       className="form-control"
                                       required
                                       onChange={this.onChange}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="vulnerabilityScore">Score</label>
                                <input type="number"
                                       name="score"
                                       id="vulnerabilityScore"
                                       className="form-control"
                                       required
                                       onChange={this.onChange}/>
                            </div>
                            <div className="form-group">
                                <label htmlFor="vulnerabilityPackages">Packages</label>
                                <input
                                    type="text"
                                    name="packages"
                                    id="vulnerabilityPackages"
                                    className="form-control"
                                    required
                                    onChange={this.onChange}
                                />
                                <small id="packagesHelp" className="form-text text-muted">
                                    Separate each package with a comma.
                                </small>
                            </div>
                            <label htmlFor="vulnerabilityNotes">Vuln Notes</label>
                            <textarea
                                className="form-control"
                                name="notes"
                                id="vulnerabilityNotes"
                                rows="5"
                                required
                                onChange={this.onChange}
                            />
                            <button type="submit" className="btn custom-button mt-3">
                                Create Vuln
                            </button>
                            <Link to="/vulnerabilities" className="btn btn-link mt-3">
                                Back to vulns
                            </Link>
                        </form>
                    </div>
                </div>
            </div>
        );
    }


}

export default NewVulnerability;